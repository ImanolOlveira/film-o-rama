package com.imanololveira.filmorama;


import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.Loader;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.DisplayMetrics;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.ProgressBar;

import com.imanololveira.filmorama.data.MoviesLoader;
import com.imanololveira.filmorama.utils.NetworksUtils;

import static com.imanololveira.filmorama.data.MoviesLoader.LOADER_FAV;
import static com.imanololveira.filmorama.data.MoviesLoader.LOADER_POP;
import static com.imanololveira.filmorama.data.MoviesLoader.LOADER_TOP;


public class MainActivity extends AppCompatActivity
        implements MoviesAdapter.MoviesAdapterOnClickHandler
        ,LoaderManager.LoaderCallbacks<TmdbMovie[]> {

    //The number of columns used in the adapter generation.
    final static int COL_NUMBER = 2;

    // String used to save the last selected list name in Shared Preferences.
    private static final String LAST_LIST = "LAST_LIST";

    public ProgressBar mLoadingIndicator;
    private LinearLayout errorLayout;
    private Menu menuList;

    //References to RecyclerView and the adapter.
    public  MoviesAdapter moviesAdapter;
    private RecyclerView mRecyclerView;
    private GridLayoutManager layoutManager;

    // This object will be used to check if a movie is in favorites without a DB query.
    public static TmdbMovie[] favoritesListData;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mLoadingIndicator = findViewById(R.id.loading_indicator);
        errorLayout = findViewById(R.id.no_conn_layout);

        // TODO: an API key is needed to access the Tmdb. Complete api_key.xml.
        NetworksUtils.setApiKey(getString(R.string.tmdb_key));
        loadRecyclerView();
        getSupportLoaderManager().initLoader(getLastSelectedView(),null , this);
    }

    /**
     * Sets the RecyclerView and the sets the adapter.  The Number of columns and the
     * screen size are used in the process.
     */
    public void loadRecyclerView(){
        mRecyclerView = findViewById(R.id.rv_movies);
        layoutManager = new GridLayoutManager(this, COL_NUMBER);
        mRecyclerView.setLayoutManager(layoutManager);
        mRecyclerView.setHasFixedSize(true);
        // Creates an adapter if needed passing the screen size
        if(moviesAdapter == null){
            moviesAdapter = new MoviesAdapter(getScreenSize(),this);
        }
        mRecyclerView.setAdapter(moviesAdapter);
    }

    /**
     * Instantiates and returns a new AsyncTaskLoader with the given ID.
     * This loader will return task data as a TmdbMovie[] or null if an error occurs.
     * Implements the required callbacks to take care of loading data.
     */

    @Override
    public Loader<TmdbMovie[]> onCreateLoader(int loaderId, Bundle loaderArgs) {
        return new MoviesLoader(this, loaderId);
    }

    /**
     * Called when a previously created loader has finished its load.
     *
     * @param loader The Loader that has finished.
     * @param data The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<TmdbMovie[]> loader, TmdbMovie[] data) {

        // Hides the loading indicator
        mLoadingIndicator.setVisibility(View.INVISIBLE);

        // Check if there is data
        if(data != null ) {
            hideWarning();
            // Set the adapter data using setAdapterData method if its the correct task
            if (getLastSelectedView() == loader.getId()) {
                moviesAdapter.setAdapterData(data);
            }
        }else {
            // Show "No connection message"
            showWarning();
        }
    }

    /**
     * onLoaderReset removes any references this activity had to the loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<TmdbMovie[]> loader) {
        // Not implemented. Needs to be overridden;
    }

    /**
     * Methods to show and hide a warning with a retry button, disable the menu and hide the recyclerView.
     */
    public void showWarning(){
        mRecyclerView.setVisibility(View.INVISIBLE);
        errorLayout.setVisibility(View.VISIBLE);
        if(menuList != null) {
            menuList.setGroupEnabled(0, false);
        }
    }
    public void hideWarning(){
        mRecyclerView.setVisibility(View.VISIBLE);
        errorLayout.setVisibility(View.INVISIBLE);
        if(menuList != null) {
            menuList.setGroupEnabled(0, true);
        }
    }

    /**
     * Gets the screen size in pixels.
     */
    private int getScreenSize(){
        int size;
        DisplayMetrics displaymetrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(displaymetrics);
        size = displaymetrics.widthPixels;
        return size;
    }

    /**
     * Menu inflater.
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        menuList = menu;
        // Disables the menu if activity is recreated and the error warning is shown
        if (errorLayout.getVisibility() == View.VISIBLE){
            menuList.setGroupEnabled(0, false);
        }
        return true;
    }

    /**
     * Handles the menu items onClick events.
     */
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();
        // The user selection is saved and the list is changed
        switch (id){
            case R.id.menu_pop:{
                saveViewSelection(LOADER_POP);
                getSupportLoaderManager().initLoader(LOADER_POP, null, this);
                return true;
            }
            case R.id.menu_highest_rated:{
                saveViewSelection(LOADER_TOP);
                getSupportLoaderManager().initLoader(LOADER_TOP, null, this);
                return true;
            }
            case R.id.menu_favorite:{
                saveViewSelection(LOADER_FAV);
                getSupportLoaderManager().initLoader(LOADER_FAV, null, this);
                return true;
            }
        }
        return super.onOptionsItemSelected(item);
    }

    /**
     * Handles RecyclerView item clicks.
     *
     * @param clickedItemIndex The item that was clicked.
     */
    @Override
    public void onClick(int clickedItemIndex) {
        Context context = this;
        TmdbMovie clickedItem = MoviesAdapter.moviesDataList[clickedItemIndex];
        Class destinationClass = DetailActivity.class;
        Intent intentToStartDetailActivity = new Intent(context, destinationClass);
        // Pass the clicked item data to the DetailActivity, trough the corresponding Intent.
        intentToStartDetailActivity.putExtra(Intent.EXTRA_TEXT, clickedItem);
        // Check if it is registered as favorite.
        boolean isFavorite = TmdbMovie.isFavorite(clickedItem,favoritesListData);
        // Pass a boolean to tag or not a movie as favorite.
        intentToStartDetailActivity.putExtra("IS_FAVORITE", isFavorite);
        startActivity(intentToStartDetailActivity);
    }
    public void onClickRetry(View view){
        // Forces the loader with null data to start again
        getSupportLoaderManager().destroyLoader(getLastSelectedView());
        getSupportLoaderManager().restartLoader(getLastSelectedView(),null , this);
    }

    /**
     * Saves and gets the last selected list using shared preferences.
     */
    private void saveViewSelection(int LIST_INDEX){
        SharedPreferences sharedPref = getPreferences(Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = sharedPref.edit();
        editor.putInt(LAST_LIST, LIST_INDEX);
        editor.commit();
    }
    private int getLastSelectedView(){
        SharedPreferences sharedPref = getPreferences(Context.MODE_PRIVATE);
        return sharedPref.getInt(LAST_LIST,LOADER_POP);
    }
}
